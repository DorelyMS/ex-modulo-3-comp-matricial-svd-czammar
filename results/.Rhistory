indices <- function(n) {
# Crea una lista de tamaño (n-1)n/2 con pares de índices de la siguiente
#  manera: (1,2),..,(1,n),(2,3),..,(2,n),...,(n-1,n)
# Args:
#    n: número entero postivo
#       se refiere al número de columnas
#Returns:
#    lista con pares de índices
a <- NULL
b <- NULL
indices <- NULL
for (i in 1:(n-1)){
a <- append(a,rep(i,n-i))
b <- append(b,seq(i+1,n))
}
for(i in 1:round(n*(n-1)/2))
indices[[i]] <- list(c(a[i], b[i]))
indices
}
ortogonal <- function(u,v,TOL=10^-8){
# Verifica si dos vectores son ortogonales, arrojando un 1 si lo es, y un 0 si no lo es.
# Args:
# u, v como vectores de la misma dimensión.Y un valor real de tolerancia TOL(10^-8).
# Nota: Se sugiere una TOL mayor a 10^-32.
# Returns:
# Valor booleano 0 (no son ortongoales), 1 (son ortogonales)
if ( norm(u,type ="2") < TOL | norm(v,type ="2") < TOL){ret<-0}
else{
if( (u%*%v)/(norm(u,type ="2")*norm(v,type ="2")) < TOL){ret<-1}
else{ret<-0}
}
ret
}
signo<-function(x) {
# Indica el signo de un número x
# Args:
#    x (numeric): número a revisar
# Returns:
#    1 si el número es positivo o cero
#    -1 si el número es negativo
ifelse(x<0,-1,1)
}
svd_jacobi_aprox <- function(A,TOL,maxsweep){
# Función que calcula la descomposición de una matriz A en sus componentes U, S V,
# utilizando el método de Jacobi para calcular la factorización SVD.De esta forma
# la matriz A queda descompuesta de la siguiente forma: A = U*S*t(V).
# Args:
#    A (matriz): Matriz de entrada (nxm) de números reales a la que se le calculará la descomposición SVD.
#    TOL (numeric): controla la convergencia del método, siendo un valor real de 10^-8 (sugerido en la nota 3.3.d.SVD)
#    Nota: Se sugiere una TOL mayor a 10^-32.
#    maxsweep (numeric): número máximo de sweeps,donde cada sweep consiste de un número máximo(nmax)
#    de rotaciones; y en cada sweep se ortogonalizan 2 columnas.
# Returns:
#   Lista con 3 elementos, donde el primer elemento representan a las matriz S(mxm) matriz diagonal,el segundo a la matriz U(nxm)
#   y el tercero y último a la matriz V (mxm).En conjunto estas tres matrices componen la factorización SVD de la matriz de entrada A.
#dimensiones
n<-dim(A)[2] #numero de columnas
m<-dim(A)[1] #numero de filas
nmax<-n*(n-1)/2
#inicialza valores del ciclo
ak<-A
vk<-diag(n)
sig <- NULL
uk <- ak
num_col_ortogonal<-0
k<-0
while(k<=maxsweep & num_col_ortogonal<nmax){
num_col_ortogonal<-0
ind <- indices(n)
for(i in 1:nmax){
col_j<-ak[,ind[[i]][[1]][2]]
col_i<-ak[,ind[[i]][[1]][1]]
#comprueba ortogonalidad
if(ortogonal(col_i,col_j,TOL)==1){
num_col_ortogonal<-num_col_ortogonal+1
}
else{
#calcula coeficientes de la matriz
a<-col_i%*%col_i
b<-col_j%*%col_j
c<-col_i%*%col_j
if(c<TOL){break}
#calcula la rotacion givens que diagonaliza
epsilon<-(b-a)/(2*c)
t<-signo(epsilon)/(abs(epsilon)+sqrt(1+epsilon**2))
cs<-1/sqrt(1+t**2)
sn<-cs*t
#actualiza las columnas de la matriz ak
temp<-ak[,ind[[i]][[1]][1]]
ak[,ind[[i]][[1]][1]]<-c(cs)*temp-c(sn)*ak[,ind[[i]][[1]][2]]
ak[,ind[[i]][[1]][2]]<-c(sn)*temp+c(cs)*ak[,ind[[i]][[1]][2]]
#actualiza las columnas de la matriz vk
temp<-vk[,ind[[i]][[1]][1]] #cambio
vk[,ind[[i]][[1]][1]]<-c(cs)*temp-c(sn)*vk[,ind[[i]][[1]][2]]
vk[,ind[[i]][[1]][2]]<-c(sn)*temp+c(cs)*vk[,ind[[i]][[1]][2]]
}#cierra else
}#cierra for
k<-k+1
}#cierra while
#Obtener sigma
sig<-apply(ak, 2, function(x){norm(x,"2")})
#Obtener U
for(i in 1:n){
if (sig[i]<TOL){
uk[,i]<-0
} else{
uk[,i] <- ak[,i]/sig[i]
}
}
# Indices de sigma ordenada en forma decreciente para ordenar V,S,U
index <- order(sig,decreasing = TRUE)
vk <- vk[,index]
S <- diag(sig[index])
uk <- uk[,index]
list(S = S, U = uk, V= vk)
}
svd_jacobi_aprox_2 <- function(A,TOL,maxsweep){
n<-dim(A)[2] #numero de columnas
m<-dim(A)[1] #numero de filas
nmax<-n*(n-1)/2
#inicialza valores del ciclo
ak<-A
vk<-diag(n)
sig <- NULL
uk <- ak
num_col_ortogonal<-0
k<-0
stop<-FALSE
while(k<=maxsweep & num_col_ortogonal<nmax){
num_col_ortogonal<-0
#ind <- indices(n)
for(i in 1:(n-1)){
#cat("i= ",i,"\n" )
for(j in (i+1):n){
#cat("j= ",j,"\n" )
col_j<-ak[,j]
col_i<-ak[,i]
#comprueba ortogonalidad
if(ortogonal(col_i,col_j,TOL)==1){
num_col_ortogonal<-num_col_ortogonal+1
}
else{
#calcula coeficientes de la matriz
a<-col_i%*%col_i
b<-col_j%*%col_j
c<-col_i%*%col_j
if(c<TOL){
stop<-TRUE
break}
#calcula la rotacion givens que diagonaliza
epsilon<-(b-a)/(2*c)
t<-signo(epsilon)/(abs(epsilon)+sqrt(1+epsilon**2))
cs<-1/sqrt(1+t**2)
sn<-cs*t
#actualiza las columnas de la matriz ak
temp<-ak[,i]
ak[,i]<-c(cs)*temp-c(sn)*ak[,j]
ak[,j]<-c(sn)*temp+c(cs)*ak[,j]
#actualiza las columnas de la matriz vk
temp<-vk[,i] #cambio
vk[,i]<-c(cs)*temp-c(sn)*vk[,j]
vk[,j]<-c(sn)*temp+c(cs)*vk[,j]
}#cierra else
}#cierra for j
if(stop==TRUE){
stop<-FALSE
break
}
}#cierra for i
k<-k+1
}#cierra while
#Obtener sigma
sig<-apply(ak, 2, function(x){norm(x,"2")})
#Obtener U
for(i in 1:n){
if (sig[i]<TOL){
uk[,i]<-0
} else{
uk[,i] <- ak[,i]/sig[i]
}
}
# Indices de sigma ordenada en forma decreciente para ordenar V,S,U
index <- order(sig,decreasing = TRUE)
vk <- vk[,index]
S <- diag(sig[index])
uk <- uk[,index]
list(S = S, U = uk, V= vk)
}
n=10**2
#A<-matrix(rep(1,n**2,replace=TRUE),nrow=n)
A<-matrix(sample(-50:50,n**2,replace=TRUE),nrow=n)
dim(A)
inicio<-Sys.time()
ss<-svd_jacobi_aprox_2(A,10**-8,100)
fin<-Sys.time()
fin-inicio
n=10**3
#A<-matrix(rep(1,n**2,replace=TRUE),nrow=n)
A<-matrix(sample(-50:50,n**2,replace=TRUE),nrow=n)
dim(A)
inicio<-Sys.time()
ss<-svd_jacobi_aprox_2(A,10**-8,100)
fin<-Sys.time()
fin-inicio
algas <- readRDS("/Users/cesar/github/intro-to-data-science-2019/EDA/algas/algas.rds")
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
#source("01-prepare.R")
#source("02-clean.R")
source("utils.R")
setwd("~/github/ex-modulo-3-comp-matricial-svd-czammar/results")
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
#source("01-prepare.R")
#source("02-clean.R")
?rnorm
install.packages(c("candisc", "CCA", "CCP"))
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
#source("01-prepare.R")
#source("02-clean.R")
n= 10**1
A = matrix(rnorm(n**2), ncol=n)
b = matrix(rnorm(n), ncol=1)
TOL = 10**-8
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
#source("01-prepare.R")
#source("02-clean.R")
set.seed(231)
n= 10**1
A = matrix(rnorm(n**2), ncol=n)
b = matrix(rnorm(n), ncol=1)
TOL = 10**-8
eliminacion_bloques(A,b,TOL,1)
matrix(rnorm(n**2), ncol=n)
eliminacion_bloques(A,b,TOL,2)
## Instalamos paquetes
rm(list = ls())
paquetes <- c('matrixcalc', 'wordspace')
instalar <- function(paquete) {
if (!require(paquete,character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(as.character(paquete), dependecies = TRUE, repos = "http://cran.us.r-project.org")
library(paquete, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
lapply(paquetes, instalar)
## Cargamos paquetes necesarios
library("matrixcalc")
library("wordspace")
#source("metadata.R")
source("utils.R")
source("00-load.R")
#source("01-prepare.R")
#source("02-clean.R")
set.seed(231)
n= 10**2
A = diag(n)#matrix(rnorm(n**2), ncol=n)
b = matrix(rnorm(n), ncol=1)
TOL = 10**-8
eliminacion_bloques(A,b,5,TOL,2)
svd_jacobi_aprox(A,TOL,1)
set.seed(231)
n= 10**2
A = diag(n)#matrix(rnorm(n**2), ncol=n)
b = matrix(rnorm(n), ncol=1)
TOL = 10**-8
z<-eliminacion_bloques(A,b,5,TOL,2)
norm(A%*%z-b,"2")/norm(b,"2")
set.seed(231)
n= 10**3
A = diag(n)#matrix(rnorm(n**2), ncol=n)
b = matrix(rnorm(n), ncol=1)
TOL = 10**-8
z<-eliminacion_bloques(A,b,5,TOL,2)
norm(A%*%z-b,"2")/norm(b,"2")
